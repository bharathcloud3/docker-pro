Below is a basic `Dockerfile` that you can use to containerize a React.js application:

```Dockerfile
# Use an official Node.js runtime as the base image
FROM node:14-alpine

# Set the working directory inside the container
WORKDIR /app

# Copy package.json and package-lock.json to the working directory
COPY package*.json ./

# Install the project dependencies
RUN npm install

# Copy the rest of the application code to the working directory
COPY . .

# Build the React app for production
RUN npm run build

# Serve the React app using a lightweight HTTP server
FROM nginx:alpine

# Copy the build output from the previous stage to the nginx HTML directory
COPY --from=0 /app/build /usr/share/nginx/html

# Expose port 80
EXPOSE 80

# Start nginx server in the foreground
CMD ["nginx", "-g", "daemon off;"]
```

Here's a brief explanation of what this `Dockerfile` does:

1. **Base Image**: We use the official Node.js image from Docker Hub with Alpine Linux as it's lightweight.
  
2. **Working Directory**: Set a working directory inside the container named `/app`.

3. **Dependencies**: Copy `package.json` and `package-lock.json` to the working directory and install the project dependencies using `npm install`.

4. **Application Code**: Copy the rest of the application code to the working directory.

5. **Build**: Run `npm run build` to build the React app for production.

6. **Nginx**: Use an nginx image to serve the built React app.

7. **Copy Build**: Copy the built React app from the previous stage into the nginx HTML directory.

8. **Expose Port**: Expose port 80 for the nginx server.

9. **Start Nginx**: Start the nginx server in the foreground with the `CMD` instruction.

To build the Docker image, navigate to the directory containing the `Dockerfile` and run:

```bash
docker build -t my-react-app .
```

Replace `my-react-app` with your preferred image name.

To run a container using the image:

```bash
docker run -p 8080:80 my-react-app
```

This will map port 8080 on your host machine to port 80 on the container. Access `http://localhost:8080` in your web browser to view the React app running inside the Docker container.